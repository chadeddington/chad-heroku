{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","googlePhotos","page","googleSignIn","_this","GOOGLE_AUTH","signIn","then","e","googleToken","window","gapi","auth2","getAuthInstance","currentUser","get","getAuthResponse","access_token","catch","console","error","auth_token","listMedia","listAlbums","log","fetch","concat","res","json","data","err","requestOut","setState","mediaItems","nextPageToken","func","wait","timeout","context","this","args","arguments","callNow","clearTimeout","setTimeout","apply","_this2","load","client","init","clientId","scope","addEventListener","debounce","_","clientHeight","document","documentElement","scrollHeight","scrollTop","react_default","a","createElement","className","onClick","map","photo","i","mimeType","indexOf","href","productUrl","target","rel","key","src","baseUrl","alt","filename","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d557339.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = {googlePhotos: [], page: ''}\n\n  googleSignIn = () => {\n    this.GOOGLE_AUTH.signIn().then(e => {\n      this.googleToken = window.gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token;\n      debugger;\n   }).catch(e => {\n     console.error(e)\n     debugger;\n   })\n  }\n\n  debounce(func, wait) {\n    let timeout;\n    // return a function to be called as the event handler\n    return function() {\n      let context = this\n      let args = arguments;\n\n      let later = function() {\n        timeout = null;\n        func.apply(context, args);\n      }\n\n      let callNow = !timeout;\n\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n\n      if (callNow) func.apply(context, args);\n    }\n  }\n\n  componentDidMount() {\n    if (window.gapi) {\n      // Google Auth API\n      window.gapi.load('client:auth2', () => {\n        window.gapi.client.init({\n          'clientId': '1073743336431-k4mr9nfbtl1f4e83ml13pjbitftu2kpg.apps.googleusercontent.com',\n          'scope': 'https://www.googleapis.com/auth/photoslibrary.readonly',\n        }).then( () =>{\n            this.GOOGLE_AUTH = window.gapi.auth2.getAuthInstance();\n            console.log(\"Google initialized successfully! Good Job!\", this.GOOGLE_AUTH)\n        }).catch(function(err) {\n            console.log(\"There was an error initializing google\", err);\n        });\n      });\n    }\n\n    // Add scroll listener\n\n    // let photoWrapper = document.querySelector('.photo-wrapper');\n    // console.log('photo wrapper ', photoWrapper);\n    window.addEventListener('scroll', this.debounce(_ => {\n        console.log('scroll')\n        let clientHeight = document.documentElement.clientHeight;\n        let scrollHeight = document.documentElement.scrollHeight\n        // If the user scrolls within 100 px of the bottom\n        if (scrollHeight - 100 < clientHeight + document.documentElement.scrollTop) {\n          this.listMedia();\n        }\n      }, 500)\n    )\n\n    // fetch('/express-backend').then(res => {\n    //   res.json().then(data => {\n    //     console.log('testing: ', data);\n    //   }).catch(err => {\n    //     console.log(err)\n    //   })\n    // })\n  }\n\n  signIn = () => {\n    this.GOOGLE_AUTH.signIn().then(e => {\n      this.auth_token = this.GOOGLE_AUTH.currentUser.get().getAuthResponse().access_token;\n      // this.listAlbums();\n      this.listMedia();\n    });\n  }\n\n  listAlbums = () => {\n    console.log('list items called');\n\n    fetch(`https://photoslibrary.googleapis.com/v1/albums?access_token=${this.auth_token}`)\n      .then(res => res.json().then(data => {\n        console.log(data)\n      }))\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n  listMedia = () => {\n    if (this.requestOut) return; //prevent duplicate requests\n    this.requestOut = true;\n    fetch(`https://photoslibrary.googleapis.com/v1/mediaItems?access_token=${this.auth_token}&pageToken=${this.state.page}`)\n      .then(res => res.json().then(data => {\n        // Concat new array of photos to existing array of photos\n        // Update the page to fetch next\n        this.setState(state => ({googlePhotos: state.googlePhotos.concat(data.mediaItems), page: data.nextPageToken})); \n        this.requestOut = false; // Allow new requests to be made\n      }))\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.signIn}>List Albums</button>\n        <div className=\"photo-wrapper\">\n        {\n          (this.state.googlePhotos) ? this.state.googlePhotos.map((photo, i) => (\n            (photo.mimeType.indexOf('video') === -1) ? <div>\n              <a href={photo.productUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                <img className=\"image\" key={i} src={photo.baseUrl} alt={photo.filename}></img>\n              </a>\n            </div> : ''\n            )\n          ) : ''\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}