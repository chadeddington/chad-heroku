{"version":3,"sources":["logo.svg","components/Searchbar.js","components/Day.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Searchbar","_ref","search","thisYear","Date","getFullYear","_React$useState","React","useState","getMonth","_React$useState2","Object","slicedToArray","month","setMonth","_React$useState3","_React$useState4","year","setYear","inputStyles","height","padding","boxSizing","margin","borderRadius","fontSize","textAlign","react_default","a","createElement","onChange","e","target","value","style","objectSpread","map","i","type","placeholder","width","onClick","Day","classes","date","_ref$images","images","className","backgroundImage","concat","length","App","state","googlePhotos","signIn","searchDate","_this","GOOGLE_AUTH","then","auth_token","currentUser","get","getAuthResponse","access_token","listMedia","requestOut","filters","dateFilter","dates","config","method","body","JSON","stringify","fetch","res","json","data","console","log","setState","mediaItems","catch","err","alert","func","wait","timeout","context","this","args","arguments","callNow","clearTimeout","setTimeout","apply","_this2","window","gapi","load","client","init","clientId","scope","auth2","getAuthInstance","dateObj","getDate","weekday","getDay","monthDays","offset","dayArray","Array","fill","day","forEach","photo","mediaMetadata","creationTime","match","Number","push","baseUrl","drawCalendar","components_Searchbar","components_Day","assign","href","productUrl","rel","key","src","alt","filename","Component","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yMCyDzBC,MAvDf,SAAAC,GAA6B,IAATC,EAASD,EAATC,OACZC,GAAW,IAAIC,MAAOC,cADDC,EAEDC,IAAMC,UAAS,IAAIJ,MAAOK,WAAa,GAFtCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAEpBO,EAFoBH,EAAA,GAEbI,EAFaJ,EAAA,GAAAK,EAGHR,IAAMC,SAASL,GAHZa,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGpBE,EAHoBD,EAAA,GAGdE,EAHcF,EAAA,GAiCrBG,EAAc,CAClBC,OAAQ,GACRC,QAAS,EACTC,UAAW,cACXC,OAAQ,EACRC,aAAc,EACdC,SAAU,GACVC,UAAW,UAEb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,SAvCQ,SAACC,GACnBjB,EAASiB,EAAEC,OAAOC,QAsCeC,MAAKvB,OAAAwB,EAAA,EAAAxB,CAAA,GAAMQ,GAAcc,MAAOpB,GA1BpD,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAeYuB,IAAK,SAACvB,EAAOwB,GAAR,OAAcV,EAAAC,EAAAC,cAAA,UAAQI,MAAOI,EAAI,GAAIxB,MAGpDc,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOC,aAAa,IAAInC,MAAOC,cAAeyB,SAvC3C,SAACC,GAElBb,EAAQa,EAAEC,OAAOC,QAqCiEC,MAAKvB,OAAAwB,EAAA,EAAAxB,CAAA,GAAMQ,EAAN,CAAmBqB,MAAO,QAE/Gb,EAAAC,EAAAC,cAAA,UAAQY,QApCQ,SAACV,GACnB7B,EAAO,CAACW,QAAOI,UAmCiBiB,MAAKvB,OAAAwB,EAAA,EAAAxB,CAAA,GAAMQ,EAAN,CAAmBE,QAAS,UAA/D,gBCjCSqB,MAjBf,SAAAzC,GAA2C,IAA7B0C,EAA6B1C,EAA7B0C,QAASC,EAAoB3C,EAApB2C,KAAoBC,EAAA5C,EAAd6C,cAAc,IAAAD,EAAL,GAAKA,EACzC,OACElB,EAAAC,EAAAC,cAAA,OAAKkB,UAAWJ,EAAST,MAAO,CAACc,gBAAe,OAAAC,OAASH,EAAO,GAAhB,OAE7CF,EACCjB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,YAAYH,GAC5B,KAGCE,EAAOI,OACNvB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,gBAAgBD,EAAOI,QACvC,OC+LKC,6MArMbC,MAAQ,CAACC,aAAc,GAAIxC,OAAO,IAAIT,MAAOK,WAAa,EAAGQ,MAAM,IAAIb,MAAOC,iBAgD9EiD,OAAS,SAACC,GAKRC,EAAKC,YAAYH,SAASI,KAAK,SAAA3B,GAC7ByB,EAAKG,WAAaH,EAAKC,YAAYG,YAAYC,MAAMC,kBAAkBC,aAEvEP,EAAKQ,UAAUT,QAInBS,UAAY,SAAA/D,GAAmB,IAAjBY,EAAiBZ,EAAjBY,MAAOI,EAAUhB,EAAVgB,KACnB,IAAIuC,EAAKS,WAAT,CACAT,EAAKS,YAAa,EAClB,IAAMC,EAAU,CACdA,QAAS,CACPC,WAAY,CACVC,MAAO,CACL,CACEvD,QACAI,YAMJoD,EAAS,CACbC,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,IAEvBQ,MAAK,0EAAAzB,OAA2EO,EAAKG,WAAhF,iBAA2GU,GAE7GX,KAAK,SAAAiB,GAAG,OAAIA,EAAIC,OAAOlB,KAAK,SAAAmB,GAC3BC,QAAQC,IAAIF,GAEZrB,EAAKwB,SAAS,SAAA5B,GAAK,MAAK,CAACC,aAAcwB,EAAKI,WAAYpE,MAAOA,EAAOI,UACtEuC,EAAKS,YAAa,MAEnBiB,MAAM,SAAAC,GACLC,MAAM,uBAAwBD,+EAtF3BE,EAAMC,GACb,IAAIC,EAEJ,OAAO,WACL,IAAIC,EAAUC,KACVC,EAAOC,UAOPC,GAAWL,EAEfM,aAAaN,GACbA,EAAUO,WARE,WACVP,EAAU,KACVF,EAAKU,MAAMP,EAASE,IAMMJ,GAExBM,GAASP,EAAKU,MAAMP,EAASE,gDAIjB,IAAAM,EAAAP,KACdQ,OAAOC,MAETD,OAAOC,KAAKC,KAAK,eAAgB,WAC/BF,OAAOC,KAAKE,OAAOC,KAAK,CACtBC,SAAY,4EACZC,MAAS,2DACR7C,KAAM,WACLsC,EAAKvC,YAAcwC,OAAOC,KAAKM,MAAMC,kBACrC3B,QAAQC,IAAI,6CAA8CiB,EAAKvC,eAChEyB,MAAM,SAASC,GACdL,QAAQC,IAAI,yCAA0CI,8CAiE9D,IALA,IAAIuB,EAAU,IAAItG,KAAKqF,KAAKrC,MAAMnC,KAAMwE,KAAKrC,MAAMvC,MAAQ,GACvD+B,EAAO8D,EAAQC,UACfC,EAAUF,EAAQG,SAChBC,EAAY,IAAI1G,KAAKqF,KAAKrC,MAAMnC,KAAMwE,KAAKrC,MAAMvC,MAAO,GAAG8F,UAE1D/D,EAAO,GACRgE,EAAU,EACZA,IAEAA,EAAU,EAEZhE,IAEF,IAAImE,EAASH,EAOTI,EANaC,MAAM,IAAIC,KAAK,MAMN9E,IAAK,SAAC+E,EAAK9E,GACnC,OAAIA,EAAI0E,GAAU1E,GAAKyE,EAAYC,EAC1B,GAEA,CAACnE,KAAMP,EAAI0E,EAAS,EAAGjE,OAAQ,MAgB1C,OAZI2C,KAAKrC,MAAMC,aAAaH,QAC1BuC,KAAKrC,MAAMC,aAAa+D,QAAS,SAACC,GAChC,IAAIF,EAAME,EAAMC,cAAcC,aAAaC,MAAM,UAAU,GAC3DR,EAASS,OAAON,GAAOJ,EAAS,GAAGjE,OAAO4E,KAAKL,EAAMM,WASlDX,mCAIP,IAeMA,EAAWvB,KAAKmC,eAEtB,OACEjG,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,UACbpB,EAAAC,EAAAC,cAAA,6BAGFF,EAAAC,EAAAC,cAACgG,EAAD,CAAW3H,OAAQuF,KAAKnC,SACxB3B,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,yBAAf,cAAkDpB,EAAAC,EAAAC,cAAA,QAAMkB,UAAU,gBAElEpB,EAAAC,EAAAC,cAAA,aAAAoB,OA1BW,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAciBwC,KAAKrC,MAAMvC,MAAQ,GAAlC,KAAAoC,OAAwCwC,KAAKrC,MAAMnC,OACnDU,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,iBAGXiE,EAAS5E,IAAI,SAAA+E,GACX,OAAKA,EAAIvE,KAGAjB,EAAAC,EAAAC,cAACiG,EAADnH,OAAAoH,OAAA,CAAKpF,QAAQ,OAAUwE,IAFvBxF,EAAAC,EAAAC,cAACiG,EAAD,CAAKnF,QAAQ,iBAQ5BhB,EAAAC,EAAAC,cAAA,WAEG4D,KAAKrC,MAAMC,aAAgBoC,KAAKrC,MAAMC,aAAajB,IAAI,SAACiF,EAAOhF,GAAR,OACtDV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGmG,KAAMX,EAAMY,WAAYjG,OAAO,SAASkG,IAAI,uBAC7CvG,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,QAAQoF,IAAK9F,EAAG+F,IAAKf,EAAMM,QAASU,IAAKhB,EAAMiB,eAIhE,YA5LIC,aCMEC,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASlB,MACvB,2DCZNmB,IAASC,OAAOjH,EAAAC,EAAAC,cAACgH,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxF,KAAK,SAAAyF,GACjCA,EAAaC","file":"static/js/main.96a0bc19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction Searchbar({search}) {\n  const thisYear = new Date().getFullYear();\n  const [month, setMonth] = React.useState(new Date().getMonth() + 1);\n  const [year, setYear] = React.useState(thisYear);\n\n  const handleMonth = (e) => {\n    setMonth(e.target.value);\n  }\n\n  const handleYear = (e) => {\n    // TODO: Validate Year\n    setYear(e.target.value)\n  }\n\n  const handleClick = (e) => {\n    search({month, year})\n  }\n\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n\n  const inputStyles = {\n    height: 35,\n    padding: 0,\n    boxSizing: \"content-box\",\n    margin: 5,\n    borderRadius: 4,\n    fontSize: 18,\n    textAlign: 'center'\n  }\n  return (\n    <div>\n      <select onChange={handleMonth} style={{...inputStyles}} value={month}>\n        {months.map( (month, i) => <option value={i + 1}>{month}</option>)}\n      </select>\n\n      <input type=\"text\" placeholder={new Date().getFullYear()} onChange={handleYear} style={{...inputStyles, width: 100}}/>\n\n      <button onClick={handleClick} style={{...inputStyles, padding: \"0 10\"}}>Get Photos</button>\n    </div>\n  )\n}\n\nexport default Searchbar;","import React from 'react';\n\nfunction Day({classes, date, images = []}) {\n  return (\n    <div className={classes} style={{backgroundImage: `url(${images[0]})`}}>\n      {\n      (date)\n      ? <span className=\"cal-date\">{date}</span>\n      : null\n      }\n      {\n        (images.length)\n        ? <span className=\"image-length\">{images.length}</span>\n        : null\n      }\n    </div>\n  )\n}\n\nexport default Day;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Searchbar from './components/Searchbar.js';\nimport Day from './components/Day.js';\n\nclass App extends Component {\n  state = {googlePhotos: [], month: new Date().getMonth() + 1, year: new Date().getFullYear()}\n\n  debounce(func, wait) {\n    let timeout;\n    // return a function to be called as the event handler\n    return function() {\n      let context = this\n      let args = arguments;\n\n      let later = function() {\n        timeout = null;\n        func.apply(context, args);\n      }\n\n      let callNow = !timeout;\n\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n\n      if (callNow) func.apply(context, args);\n    }\n  }\n\n  componentDidMount() {\n    if (window.gapi) {\n      // Google Auth API\n      window.gapi.load('client:auth2', () => {\n        window.gapi.client.init({\n          'clientId': '1073743336431-k4mr9nfbtl1f4e83ml13pjbitftu2kpg.apps.googleusercontent.com',\n          'scope': 'https://www.googleapis.com/auth/photoslibrary.readonly',\n        }).then( () =>{\n            this.GOOGLE_AUTH = window.gapi.auth2.getAuthInstance();\n            console.log(\"Google initialized successfully! Good Job!\", this.GOOGLE_AUTH)\n        }).catch(function(err) {\n            console.log(\"There was an error initializing google\", err);\n        });\n      });\n    }\n\n    // fetch('/express-backend').then(res => {\n    //   res.json().then(data => {\n    //     console.log('testing: ', data);\n    //   }).catch(err => {\n    //     console.log(err)\n    //   })\n    // })\n  }\n\n  signIn = (searchDate) => {\n    // testing\n    // this.listMedia(searchDate)\n    // return;\n\n    this.GOOGLE_AUTH.signIn().then(e => {\n      this.auth_token = this.GOOGLE_AUTH.currentUser.get().getAuthResponse().access_token;\n      // this.listAlbums();\n      this.listMedia(searchDate);\n    });\n  }\n\n  listMedia = ({month, year}) => {\n    if (this.requestOut) return; //prevent duplicate requests\n    this.requestOut = true;\n    const filters = {\n      filters: {\n        dateFilter: {\n          dates: [\n            {\n              month,\n              year\n            }\n          ]\n        }\n      }\n    }\n    const config = {\n      method: 'POST',\n      body: JSON.stringify(filters)\n    }\n    fetch(`https://photoslibrary.googleapis.com/v1/mediaItems:search?access_token=${this.auth_token}&pageSize=100`, config)\n    // fetch('./sample.json')\n      .then(res => res.json().then(data => {\n        console.log(data)\n        // Month does not come in 0 based\n        this.setState(state => ({googlePhotos: data.mediaItems, month: month, year})); \n        this.requestOut = false; // Allow new requests to be made\n      }))\n      .catch(err => {\n        alert('There was a problem ', err)\n      })\n  }\n\n  drawCalendar() {\n    // month needs to be 0 based\n    let dateObj = new Date(this.state.year, this.state.month - 1);\n    let date = dateObj.getDate();\n    let weekday = dateObj.getDay()\n    const monthDays = new Date(this.state.year, this.state.month, 0).getDate();\n\n    while (date > 1) {\n      if (weekday > 0) {\n        weekday-- ;\n      } else {\n        weekday = 6;\n      }\n      date--;\n    }\n    var offset = weekday;\n    let monthArray = Array(42).fill(null)\n\n    // Add empty days to beginning and end of calendar array\n    // dayArray.fill(<Day classes=\"day empty\" />, 0, offset);\n    // dayArray.fill(<Day classes=\"day empty\" />, monthDays + offset);\n\n    let dayArray = monthArray.map( (day, i) => {\n      if (i < offset || i >= monthDays + offset) {\n        return {};\n      } else {\n        return {date: i - offset + 1, images: []};\n      }\n    });\n\n    if (this.state.googlePhotos.length) {\n      this.state.googlePhotos.forEach( (photo) => {\n        let day = photo.mediaMetadata.creationTime.match(/(\\d+)/g)[2]\n        dayArray[Number(day) + offset - 1].images.push(photo.baseUrl);\n        // dayArray[Number(day) + offset - 1] = (\n        //   <div className=\"day\" style={{backgroundImage: `url(${photo.baseUrl})`}}>\n        //     <span className=\"cal-date\">{day}</span>\n        //   </div>\n        // )\n      })\n    }\n\n    return dayArray\n  }\n\n  render() {\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ]\n\n    const dayArray = this.drawCalendar();\n\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>Image Calendar</h1>\n        </div>\n\n        <Searchbar search={this.signIn}/>\n        <div className=\"google-logo-container\">Powered by <span className=\"googleLogo\"></span></div>\n\n        <h1>{`${months[this.state.month - 1]} ${this.state.year}`}</h1>\n        <div className=\"photo-wrapper\">\n          {\n\n            dayArray.map(day => {\n              if (!day.date) {\n                return <Day classes=\"day empty\"/>\n              } else {\n                return <Day classes=\"day\" {...day} />\n              }\n            })\n          }\n        </div>\n\n        <div>\n        {\n          (this.state.googlePhotos) ? this.state.googlePhotos.map((photo, i) => (\n            <div>\n              <a href={photo.productUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                <img className=\"image\" key={i} src={photo.baseUrl} alt={photo.filename}></img>\n              </a>\n            </div>\n            )\n          ) : ''\n        }\n        </div>\n\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}